#summary How to include osmdroid in your project

== Using Maven ==

If you are using Maven then adding osmdroid is easy. See [HowToMaven] for details.

== Using a jar ==

You can include osmdroid in your project by downloading the latest jar file from the downloads page and placing it into your libs folder.

You will also need the slf4j-android jar from http://www.slf4j.org/android/ in your libs folder.

== Adding a !MapView ==

You can add a MapView to your xml layout using:
{{{
    <org.osmdroid.views.MapView
        android:id="@+id/mapview"
        android:layout_width="match_parent"
        android:layout_height="match_parent"
        tilesource="Mapnik"
        />
}}}

This will allow you to configure the tile source imagery for your MapView but not much else.

However, for more control over your MapView, you will want to create a MapView programmatically.

{{{
    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState)
    {
        mResourceProxy = new ResourceProxyImpl(inflater.getContext().getApplicationContext());
        mMapView = new MapView(inflater.getContext(), 256, mResourceProxy);
        return mMapView;
    }
}}}

== Creating a tile provider chain ==

One of the features of osmdroid is the customizable tile provider chain. This provides the ability to mix and match various tile provider modules to create a specific tile retrieval strategy.


TODO