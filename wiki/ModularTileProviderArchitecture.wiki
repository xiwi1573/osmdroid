#summary Describes the modular tile provider architecture and how to use and extend it.

= Note this is preliminary documentation. This code is not in the trunk yet, but it can be accessed from the branch if you want to start using it. =

= Introduction =

osmdroid has a modular and extendable tile provider architecture that allows tiles to be provided from a number of sources including online sources, local archive sources, and file store sources.

= Top Level Tile Provider =

The tile provider architecture begins with a top-level tile provider that manages calls to get tiles. There are two top-level tile providers provided for SDK users:

*!OpenStreetMapTileProviderDirect* (extends !OpenStreetMapProviderArray) - This top-level tile provider implements a default tile request chain which includes a !FileSystemProvider (a file-system cache), and a !TileDownloaderProvider (downloads map tiles from HTTP server). It is designed to get you up and running quickly and requires very little set up.

*!OpenStreetMapProviderArray* (extends !OpenStreetMapTileProvider) - This top-level tile provider allows an SDK user to provide an array of modular asynchronous tile providers to be used to obtain map tiles. When a tile is requested, the !ArrayProvider first checks the !MapTileCache (synchronously) and returns the tile if available. If not, then the !ArrayProvider returns null and sends the tile request through the asynchronous tile request chain. Each asynchronous tile provider returns success/failure to the !ArrayProvider. If successful, the !ArrayProvider passes the result to the base class. If failed, then the next asynchronous tile provider is called in the chain. If there are no more asynchronous tile providers in the chain, then the failure result is passed to the base class. The !ArrayProvider provides a mechanism so that only one unique tile-request can be in the map tile request chain at a time.

= Tile Provider Modules =

The !OpenStreetMapProviderArray is the basis for the modular tile architecture and is the "manager" class that handles calls to the tile provider modules. The provided tile provider modules available for use are:

*!OpenStreetMapTileFilesystemProvider* (extends !OpenStreetMapAsyncTileProvider) - Implements a file system cache and provides cached tiles. This functions as a tile provider by serving cached tiles. It also implements an !IFilesystemCacheProvider which can be used by other tile providers to register for file system cache access so they can put their tiles in the file system cache.

*!OpenStreetMapTileFileArchiveProvider* (extends !OpenStreetMapAsyncTileProvider) - This tile provider can provide tiles stored in a file archive.

*!OpenStreetMapTileDownloader* (extends !OpenStreetMapAsyncTileProvider) - The !OpenStreetMapTileDownloader loads tiles from an HTTP server. It subscribes to a !FilesystemCacheProvider if available and saves data in it.

= Renderers =

Tile providers use renderers to encapsulate information about the type of tiles the provider serves. A renderer also provides rendering services to create Drawables.

= Asynchronous Tile Request Chain Details =

The asynchronous tile request chain works as such:

  #. The tile request comes into the !ArrayProvider.
  #. The !ArrayProvider checks the memory-cache.
  #. If no hit, and no previous requests are pending for this tile, then fire off a request into the tile request pipeline.
  #. The first tile provider module gets the request, and queues it where a !TileLoader picks it up and tries to obtain the tile. If it can, it returns the tile as an !InputStream to the !ArrayProvider to signal "success". If it cannot, then it returns null to signal "failure".
  #. If the !ArrayProvider gets a "failure" from the async provider, it gets the next async provider for this tile and passes the tile to that provider to be processed (back to #4). If there are no more tile providers left, then the tile request fails.

= File System Cache Model =

To provide a universal file system cache for use to all providers, an !IFilesystemCacheProvider is used. If passed into the constructor of a tile provider module, the module can then register for access to the file system cache via IFilesystemCache.

This is fully implemented in the !OpenStreetMapTileFilesystemProvider. It works as such:

  #. A !OpenStreetMapTileFilesystemProvider is created. It is passed as an IFilesystemCacheProvider to every other tile provider module that is created.
  #. Each tile provider module chooses whether to register with the !IFilesystemCacheProvider. When they register, they register for a specific renderer.
  #. For those modules that do register, they get an !IFilesystemCache object which is used to save data to the file system cache for the renderer used to register.
  #. When the file system provider is asked to provide a tile, it checks each of the renderers registered with the !IFilesystemCacheProvider. If it finds a file associated with that renderer, it asks the renderer to produce a Drawable. This tile is then returned by the !OpenStreetMapTileFilesystemProvider.